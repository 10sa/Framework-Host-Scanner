<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Framework</name>
    </assembly>
    <members>
        <member name="T:Framework.Enum.CallResult">
            <summary>
            모듈 호출 후 모듈이 반환하는 값입니다.
            </summary>
        </member>
        <member name="F:Framework.Enum.CallResult.Unsafe">
            <summary>
            취약점이 있음을 나타냅니다.
            </summary>
        </member>
        <member name="F:Framework.Enum.CallResult.Safe">
            <summary>
            취약점이 없음을 나타냅니다.
            </summary>
        </member>
        <member name="F:Framework.Enum.CallResult.Status">
            <summary>
            취약점이 아닌 일반 정보를 반환했음을 나타냅니다.
            </summary>
        </member>
        <member name="F:Framework.Enum.CallResult.Exception">
            <summary>
            예외를 반환했음을 나타냅니다.
            </summary>
        </member>
        <member name="T:Framework.Enum.ModuleStatus">
            <summary>
            모듈의 호출 규약 및 상태입니다.
            </summary>
        </member>
        <member name="F:Framework.Enum.ModuleStatus.Call">
            <summary>
            모듈을 표준 호출함을 나타냅니다.
            </summary>
        </member>
        <member name="F:Framework.Enum.ModuleStatus.AsyncCall">
            <summary>
            모듈을 비동기식으로 호출함을 나타냅니다. 현재는 지원하지 않습니다.
            </summary>
        </member>
        <member name="F:Framework.Enum.ModuleStatus.ThreadCall">
            <summary>
            모듈을 스레드를 생성하여 호출함을 나타냅니다. 현재는 지원하지 않습니다.
            </summary>
        </member>
        <member name="F:Framework.Enum.ModuleStatus.DontCall">
            <summary>
            모듈을 호출하지 않음을 나타냅니다.
            </summary>
        </member>
        <member name="F:Framework.Enum.ModuleStatus.Error">
            <summary>
            모듈에 에러가 있음을 나타냅니다.
            </summary>
        </member>
        <member name="T:Framework.Enum.IVulnerableOptions">
            <summary>
            모듈의 요청 방식에 따른 옵션입니다.
            </summary>
        </member>
        <member name="F:Framework.Enum.IVulnerableOptions.ServerOnly">
            <summary>
            단순 서버의 주소만을 요구함을 나타냅니다.
            </summary>
        </member>
        <member name="F:Framework.Enum.IVulnerableOptions.AllPage">
            <summary>
            서버의 모든 페이지를 요구함을 나타냅니다.
            </summary>
        </member>
        <member name="T:Framework.Module.ModuleDataController">
            <summary>
            모듈의 데이터를 저장하고 관리하는 클래스입니다.
            </summary>
        </member>
        <member name="P:Framework.Module.ModuleDataController.Data">
            <summary>
            모듈 데이터를 저장하는 리스트입니다.
            </summary>
        </member>
        <member name="P:Framework.Module.ModuleDataController.Lenght">
            <summary>
            모듈 데이터를 저장하는 리스트의 길이입니다.
            </summary>
        </member>
        <member name="M:Framework.Module.ModuleDataController.Clear">
            <summary>
            모듈 데이터를 저장한 리스트를 초기화합니다.
            </summary>
        </member>
        <member name="M:Framework.Module.ModuleDataController.Add(Framework.Module.Base.IVulnerableModuleBase,System.String,Framework.Enum.ModuleStatus)">
            <summary>
            모듈 데이터를 저장하는 리스트에 모듈 데이터를 추가합니다.
            </summary>
            <param name="Module">IVulnerableModuleBase 인터페이스를 상속한 모듈입니다.</param>
            <param name="Name">모듈의 이름입니다.</param>
            <param name="Flag">모듈의 상태입니다.</param>
        </member>
        <member name="T:Framework.Module.ModuleController">
            <summary>
            모듈의 로드 및 관리를 담당하는 모듈 컨트롤러 클래스입니다.
            </summary>
        </member>
        <member name="M:Framework.Module.ModuleController.#ctor(System.Boolean)">
            <summary>
            모듈 컨트롤러 클래스를 초기화합니다.
            </summary>
            <param name="ModuleLoad">초기화에 동시에 모듈을 로드할지에 대한 여부입니다.</param>
        </member>
        <member name="M:Framework.Module.ModuleController.Reload">
            <summary>
            모듈을 다시 로드합니다.
            </summary>
        </member>
        <member name="M:Framework.Module.ModuleController.AddVulnerablePointCheckModule(Framework.Module.Base.IVulnerableModuleBase)">
            <summary>
            모듈을 추가합니다.
            </summary>
            <param name="Module">추가될 모듈입니다.</param>
        </member>
        <member name="M:Framework.Module.ModuleController.AddVulnerablePointCheckModule(Framework.Module.Base.IVulnerableModuleBase,System.String)">
            <summary>
            모듈이 비정상적일시 모듈 로드를 에러로 처리하여 추가하는 메소드입니다.
            </summary>
            <param name="Module">추가될 모듈입니다.</param>
            <param name="Name">모듈의 이름입니다.</param>
        </member>
        <member name="M:Framework.Module.ModuleController.ModuleLoad">
            <summary>
            외부 Dll를 로드합니다.
            </summary>
            <returns>로드된 정보를 자동으로 저장합니다.</returns>
        </member>
        <member name="T:Framework.Module.Base.IVulnerableModuleBase">
            <summary>
            VulnerablePointChecker 프레임워크에 추가될 모듈의 인터페이스 입니다.
            이 인터페이스를 상속한 클래스는 인자를 0개 사용하는 생성자를 포함하여야 합니다.
            </summary>
        </member>
        <member name="P:Framework.Module.Base.IVulnerableModuleBase.ModuleName">
            <summary>
            모듈의 이름입니다.
            </summary>
            <returns>모듈의 이름입니다.</returns>
        </member>
        <member name="P:Framework.Module.Base.IVulnerableModuleBase.ModuleVer">
            <summary>
            모듈의 버전입니다.
            </summary>
            <returns>모듈의 버전입니다.</returns>
        </member>
        <member name="P:Framework.Module.Base.IVulnerableModuleBase.IVulnerableInfo">
            <summary>
            취약점이 있을시 추가되는 설명입니다.
            </summary>
            <returns>표시되는 설명입니다.</returns>
        </member>
        <member name="M:Framework.Module.Base.IVulnerableModuleBase.IVulnerableCheck(System.String)">
            <summary>
            취약점 점검을 시작하는 인터페이스입니다. 프레임워크에서 이 메소드를 호출합니다.
            </summary>
            <param name="address">타겟 URI 주소입니다.</param>
            <returns>모듈의 반환 정보입니다.</returns>
        </member>
        <member name="T:Framework.Module.Base.Headers">
            <summary>
            HTTP 헤더의 키와 값을 저장하기 위한 구조체입니다.
            </summary>
        </member>
        <member name="F:Framework.Module.Base.Headers.Key">
            <summary>
            헤더의 키값 입니다.
            </summary>
        </member>
        <member name="F:Framework.Module.Base.Headers.Value">
            <summary>
            헤더의 값입니다.
            </summary>
        </member>
        <member name="T:Framework.Module.Base.WebBase">
            <summary>
            HTTP 통신을 위한 상속 클래스입니다.
            </summary>
        </member>
        <member name="P:Framework.Module.Base.WebBase.HttpRequest">
            <summary>
            웹 서버와의 통신을 위한 상위 클래스입니다.
            </summary>
        </member>
        <member name="P:Framework.Module.Base.WebBase.ServerAddress">
            <summary>
            웹 서버의 URI 입니다.
            </summary>
        </member>
        <member name="P:Framework.Module.Base.WebBase.ResponseHeader">
            <summary>
            서버에서 송신한 헤더입니다.
            </summary>
        </member>
        <member name="P:Framework.Module.Base.WebBase.ResponseEntity">
            <summary>
            서버에서 송신한 엔티티 본문입니다.
            </summary>
        </member>
        <member name="M:Framework.Module.Base.WebBase.SetAddress(System.String)">
            <summary>
            주소를 설정하는 메소드입니다.
            </summary>
            <param name="Address">서버에 대한 주소입니다.</param>
        </member>
        <member name="M:Framework.Module.Base.WebBase.Request(System.Boolean)">
            <summary>
            생성시 입력된 주소값으로 요청을 보냅니다.
            </summary>
            <param name="GetEntity">엔티티 본문을 Response_Entity 인스턴스에 저장할지에 대한 여부입니다.</param>
        </member>
        <member name="M:Framework.Module.Base.WebBase.RequestEx(System.Boolean,System.Boolean,System.Boolean,Framework.Module.Base.Headers)">
            <summary>
            Request 메서드와 동일한 기능을 제공하나 Request 메서드가 사용할 HTTP 헤더를 지정 합니다.
            </summary>
            <param name="GetEntitiy">엔티티 본문을 Response_Entitiy 인스턴스에 저장할지에 대한 여부입니다.</param>
            <param name="CallRequestMethod">인자로 전달받은 헤더의 키/값 쌍을 모두 헤더에 추가한 뒤 Request 메소드를 호출할지에 대한 여부입니다.</param>
            <param name="ClearAndAdd">기존에 있던 헤더 데이터를 초기화 한 뒤 추가할지에 대한 여부입니다.</param>
            <param name="Headers">헤더의 키와 값을 저장한 구조체입니다.</param>
        </member>
        <member name="M:Framework.Module.Base.WebBase.RemoveAllHeaders">
            <summary>
            모든 헤더를 제거합니다.
            </summary>
        </member>
        <member name="M:Framework.Module.Base.WebBase.RemoveHeaders(System.String)">
            <summary>
            파라매터로 넘겨받은 키 이름을 가진 헤더를 제거합니다.
            </summary>
            <param name="Name">지울 헤더의 키 이름입니다.</param>
        </member>
        <member name="M:Framework.Module.Base.WebBase.GetHeader(System.Net.WebResponse)">
            <summary>
            HTTP 요청 후 서버측에서 반환하는 헤더를 ResponseHeader 인스턴스에 저장합니다.
            </summary>
            <param name="Response">서버측에서 반환하는 데이터를 포함한 WebResponse 클래스입니다.</param>
        </member>
        <member name="M:Framework.Module.Base.WebBase.GetEntity(System.Net.WebResponse)">
            <summary>
            HTTP 요청 후 서버측에서 반환하는 엔티티 본문을 Response_Entitiy 인스턴스에 저장합니다.
            </summary>
            <param name="Response">서버측에서 반환하는 데이터를 포함한 WebResponse 클래스입니다.</param>
        </member>
        <member name="M:Framework.Module.Base.WebBase.MakeUrl(System.String)">
            <summary>
            스킴이 포함되지 않은 주소 문자열에 스킴을 추가하고 URI로 만들어 반환합니다.
            </summary>
            <param name="address">URI 주소입니다.</param>
            <returns>완성된 URI를 반환합니다.</returns>
        </member>
        <member name="T:Framework.Struct.VulnerablePointModuleInfo">
            <summary>
            모듈을 실행시켰을때 반환하는 정보입니다.
            </summary>
        </member>
        <member name="F:Framework.Struct.VulnerablePointModuleInfo.VulnerablePointStatus">
            <summary>
            취약점 여부입니다.
            </summary>
        </member>
        <member name="F:Framework.Struct.VulnerablePointModuleInfo.VulnerablePointInfo">
            <summary>
            취약점의 정보입니다.
            </summary>
        </member>
        <member name="F:Framework.Struct.VulnerablePointModuleInfo.VulnerablePointName">
            <summary>
            취약점 모듈의 이름입니다.
            </summary>
        </member>
        <member name="F:Framework.Struct.VulnerablePointModuleInfo.VulnerablePointModuleVer">
            <summary>
            모듈의 버전입니다.
            </summary>
        </member>
        <member name="T:Framework.Struct.ModuleLoadErrorList">
            <summary>
            모듈 로드시 발생한 에러 모듈의 에러 정보를 담는 구조체입니다.
            </summary>
        </member>
        <member name="F:Framework.Struct.ModuleLoadErrorList.ErrorModuleName">
            <summary>
            에러를 일으킨 모듈의 이름입니다.
            </summary>
        </member>
        <member name="F:Framework.Struct.ModuleLoadErrorList.ErrorModuleInfo">
            <summary>
            에러의 정보입니다.
            </summary>
        </member>
        <member name="T:Framework.Struct.ModuleData">
            <summary>
            불러온 모듈의 정보를 저장합니다.
            </summary>
        </member>
        <member name="M:Framework.Struct.ModuleData.#ctor(Framework.Module.Base.IVulnerableModuleBase,System.String,Framework.Enum.ModuleStatus)">
            <summary>
            파라매터로 전달된 값으로 초기화합니다.
            </summary>
            <param name="Module">모듈의 인스턴스입니다.</param>
            <param name="Name">모듈의 이름입니다.</param>
            <param name="Info">모듈의 호출 정보입니다.</param>
        </member>
        <member name="P:Framework.Struct.ModuleData.Module">
            <summary>
            호출할 모듈의 정보입니다.
            </summary>
        </member>
        <member name="F:Framework.Struct.ModuleData.Name">
            <summary>
            호출할 모듈의 이름입니다.
            </summary>
        </member>
        <member name="F:Framework.Struct.ModuleData.Status">
            <summary>
            모듈의 상태입니다.
            </summary>
        </member>
        <member name="T:Framework.Struct.ModuleCallResult">
            <summary>
            모듈의 호출 결과와 정보를 저장하는 구조체입니다.
            </summary>
        </member>
        <member name="P:Framework.Struct.ModuleCallResult.Module">
            <summary>
            모듈의 정보입니다.
            </summary>
        </member>
        <member name="P:Framework.Struct.ModuleCallResult.Result">
            <summary>
            모듈의 호출 결과입니다.
            </summary>
        </member>
        <member name="P:Framework.Struct.ModuleCallResult.Info">
            <summary>
            모듈의 호출후 정보입니다.
            </summary>
        </member>
        <member name="M:Framework.Struct.ModuleCallResult.#ctor(Framework.Struct.ModuleData,Framework.Enum.CallResult,System.String)">
            <summary>
            인스턴스를 호출 결과로 전달받은 파라매터로 초기화합니다.
            </summary>
            <param name="Module">호출한 모듈의 ModuleData 구조체입니다.</param>
            <param name="Result">모듈 호출의 결과입니다.</param>
            <param name="Info">모듈 호출의 정보입니다.</param>
        </member>
        <member name="T:Framework.ScannerFramework">
            <summary>
            서버의 취약점을 점검하는 프레임워크 클래스입니다.
            </summary>
        </member>
        <member name="F:Framework.ScannerFramework.ModuleControll">
            <summary>
            모듈을 제어합니다.
            </summary>
        </member>
        <member name="M:Framework.ScannerFramework.VulnerablePointCheck(System.String)">
            <summary>
            목표 서버에 대한 취약점을 점검합니다.
            </summary>
            <param name="Address">목표 서버의 주소입니다.</param>
            <returns>호출 결과를 저장한 리스트를 반환합니다.</returns>
        </member>
    </members>
</doc>
